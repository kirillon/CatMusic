# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from os import path

import mutagen
from PyQt5 import QtCore, QtGui, QtWidgets, QtSql
from PyQt5.QtCore import Qt
from PyQt5.QtSql import QSqlTableModel
from PyQt5.QtWidgets import QTableView, QAbstractItemView, QHeaderView, qApp
from mutagen.mp3 import MP3

from sql.db import DataBase

db = DataBase()


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")

        MainWindow.resize(1280, 720)
        MainWindow.setWindowTitle("CatMusic")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./img/channels4_profile.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("QMainWindow{\n"
                                 "\n"
                                 "spacing:0px;\n"
                                 "padding:0px;\n"
                                 "margin:0px;\n"
                                 "}\n"
                                 "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.centralwidget.setStyleSheet("QWidget{\n"
                                         "background-color: #fff;\n"
                                         "padding:0px;\n"
                                         "margin:0px;\n"
                                         "spacing:0px\n"
                                         "}")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setSpacing(0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMaximumSize(QtCore.QSize(16777215, 75))
        self.frame.setStyleSheet("QFrame{\n"
                                 "background:#575757;\n"
                                 "}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.toolButton = QtWidgets.QToolButton(self.frame)
        self.toolButton.setStyleSheet("QToolButton{\n"
                                      "background:#575757;\n"
                                      "border:0px;\n"
                                      "\n"
                                      "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./img/back.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon1)
        self.toolButton.setIconSize(QtCore.QSize(40, 40))
        self.toolButton.setCheckable(True)
        self.toolButton.setObjectName("toolButton")
        self.horizontalLayout_5.addWidget(self.toolButton)
        spacerItem = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.toolButton_2 = QtWidgets.QToolButton(self.frame)
        self.toolButton_2.setStyleSheet("QToolButton{\n"
                                        "background:#575757;\n"
                                        "border:0px;\n"
                                        "\n"
                                        "}")
        self.toolButton_2.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./img/Play_ON.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap("./img/Play_OFF.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_2.setIcon(icon2)
        self.toolButton_2.setIconSize(QtCore.QSize(25, 25))
        self.toolButton_2.setCheckable(True)
        self.toolButton_2.setChecked(False)
        self.toolButton_2.setObjectName("toolButton_2")
        self.horizontalLayout_5.addWidget(self.toolButton_2)
        spacerItem1 = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem1)
        self.toolButton_3 = QtWidgets.QToolButton(self.frame)
        self.toolButton_3.setStyleSheet("QToolButton{\n"
                                        "background:#575757;\n"
                                        "border:0px;\n"
                                        "\n"
                                        "}\n"
                                        "")
        self.toolButton_3.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./img/next.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_3.setIcon(icon3)
        self.toolButton_3.setIconSize(QtCore.QSize(40, 40))
        self.toolButton_3.setCheckable(True)
        self.toolButton_3.setObjectName("toolButton_3")
        self.horizontalLayout_5.addWidget(self.toolButton_3)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.toolButton_4 = QtWidgets.QToolButton(self.frame)
        self.toolButton_4.setStyleSheet("QToolButton{\n"
                                        "background:#575757;\n"
                                        "border:0px;\n"
                                        "margin-right:3px;\n"
                                        "}")
        self.toolButton_4.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./img/volume_off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon4.addPixmap(QtGui.QPixmap("./img/volume.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        self.toolButton_4.setIcon(icon4)
        self.toolButton_4.setIconSize(QtCore.QSize(25, 25))
        self.toolButton_4.setCheckable(True)
        self.toolButton_4.setChecked(True)
        self.toolButton_4.setObjectName("toolButton_4")
        self.horizontalLayout_5.addWidget(self.toolButton_4)
        self.horizontalSlider = QtWidgets.QSlider(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(0, 20))
        self.horizontalSlider.setMaximumSize(QtCore.QSize(100, 16777215))
        self.horizontalSlider.setStyleSheet("QSlider::groove:horizontal { \n"
                                            "    background-color: #fff;\n"
                                            "    border: 0px solid #fff; \n"
                                            "    height: 2px; \n"
                                            "    border-radius: 4px;\n"
                                            "}\n"
                                            "QSlider{background:#575757}\n"
                                            "QSlider::handle:horizontal { \n"
                                            "    background-color: #fff; \n"
                                            "    border: 2px solid #fff; \n"
                                            "    width: 5px;\n"
                                            "    margin-top: -4px; \n"
                                            "    margin-bottom: -4px;  \n"
                                            "        \n"
                                            "    border-radius: 4px; \n"
                                            "}\n"
                                            "\n"
                                            "QSlider::handle:horizontal:hover { \n"
                                            "    border-radius: 4px;\n"
                                            "}")
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setSingleStep(1)
        self.horizontalSlider.setProperty("value", 70)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setTickInterval(1)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayout_5.addWidget(self.horizontalSlider)
        spacerItem3 = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem3)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setContentsMargins(-1, 0, -1, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("MS Reference Sans Serif")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(False)
        self.label.setFont(font)
        self.label.setStyleSheet("QLabel{color:#fff}")
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_6.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.horizontalSlider_2 = QtWidgets.QSlider(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider_2.sizePolicy().hasHeightForWidth())
        self.horizontalSlider_2.setSizePolicy(sizePolicy)
        self.horizontalSlider_2.setMinimumSize(QtCore.QSize(300, 0))
        self.horizontalSlider_2.setMaximumSize(QtCore.QSize(1400, 16777215))
        self.horizontalSlider_2.setStyleSheet("QSlider::groove:horizontal { \n"
                                              "    background-color: #E7E7E7;\n"
                                              "    border: 0px solid #E7E7E7; \n"
                                              "    height: 2px; \n"
                                              "    border-radius: 4px;\n"
                                              "}\n"
                                              "QSlider{background:#575757}\n"
                                              "QSlider::handle:horizontal { \n"
                                              "    background-color: #E7E7E7; \n"
                                              "    border: 2px solid #E7E7E7; \n"
                                              "    width: 5px;\n"
                                              "    margin-top: -4px; \n"
                                              "    margin-bottom: -4px;  \n"
                                              "        \n"
                                              "    border-radius: 4px; \n"
                                              "}\n"
                                              "\n"
                                              "QSlider::handle:horizontal:hover { \n"
                                              "    border-radius: 4px;\n"
                                              "}")
        self.horizontalSlider_2.setMaximum(1)
        self.horizontalSlider_2.setSingleStep(0)
        self.horizontalSlider_2.setPageStep(1)
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setTickInterval(100)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.verticalLayout_6.addWidget(self.horizontalSlider_2)
        self.horizontalLayout_5.addLayout(self.verticalLayout_6)
        self.label_2 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("QLabel{\n"
                                   "color:#FFF;\n"
                                   "margin-top:5px;\n"
                                   "margin-left:5px;\n"
                                   "margin-right:5px;\n"
                                   "}")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        spacerItem4 = QtWidgets.QSpacerItem(120, 20, QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem4)
        self.gridLayout_2.addWidget(self.frame, 1, 0, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(24)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("\n"
                                     "\n"
                                     "QTabBar::tab {\n"
                                     "  background: #E7E7E7;\n"
                                     "  color: black;\n"
                                     "  padding-right: 100px;\n"
                                     " padding-bottom: 0px;\n"
                                     "padding-top: 5px;\n"

                                     "\n"
                                     "\n"
                                     " }\n"
                                     "\n"
                                     " QTabBar::tab:selected {\n"
                                     "  background:#CBCBCB;\n"

                                     " }\n"
                                     "\n"
                                     "\n"
                                     "QWidget::tab-bar\n"
                                     "{\n"
                                     "    min-width:2000;\n"
                                     "}")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")

        self.gridLayout = QtWidgets.QGridLayout(self.tab_7)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.tableView = DropTableView(self.tab_7)
        self.tableView.setStyleSheet("QTableView{\n"
                                     "selection-background-color:#E7E7E7;\n"
                                     "selection-color:#000000\n"
                                     "}")
        self.tableView.setObjectName("tableView")
        self.gridLayout.addWidget(self.tableView, 0, 0, 1, 1)
        global tableview
        tableview = self.tableView
        self.tabWidget.addTab(self.tab_7, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tab_8)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tableView_2 = QtWidgets.QTableView(self.tab_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableView_2.sizePolicy().hasHeightForWidth())
        self.tableView_2.setSizePolicy(sizePolicy)
        self.tableView_2.setMaximumSize(QtCore.QSize(300, 16777215))
        self.tableView_2.setObjectName("tableView_2")
        self.horizontalLayout_3.addWidget(self.tableView_2)
        self.tableView_3 = QtWidgets.QTableView(self.tab_8)
        global tableView_3
        tableView_3 = self.tableView_3
        self.tableView_3.setObjectName("tableView_3")
        self.horizontalLayout_3.addWidget(self.tableView_3)
        self.tabWidget.addTab(self.tab_8, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 30))
        font = QtGui.QFont()
        font.setFamily("MS UI Gothic")
        font.setPointSize(18)
        self.menubar.setFont(font)
        self.menubar.setStyleSheet("QMenuBar{\n"
                                   "background:#575757;\n"
                                   "color:#fff;\n"
                                   "}\n"
                                   "\n"
                                   "QMenuBar::item:selected{\n"
                                   "background:#4D4D4D;\n"
                                   "}")
        self.menubar.setDefaultUp(False)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setAutoFillBackground(False)
        self.menuFile.setObjectName("menuFile")
        self.menuControls = QtWidgets.QMenu(self.menubar)
        self.menuControls.setObjectName("menuControls")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuSupport = QtWidgets.QMenu(self.menuHelp)
        self.menuSupport.setObjectName("menuSupport")
        MainWindow.setMenuBar(self.menubar)
        self.actionAdd_file = QtWidgets.QAction(MainWindow)
        self.actionAdd_file.setObjectName("actionAdd_file")
        self.actionAdd_Playlist = QtWidgets.QAction(MainWindow)
        self.actionAdd_Playlist.setObjectName("actionAdd_Playlist")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionPrevious_Track = QtWidgets.QAction(MainWindow)
        self.actionPrevious_Track.setObjectName("actionPrevious_Track")
        self.actionPause_Play = QtWidgets.QAction(MainWindow)
        self.actionPause_Play.setObjectName("actionPause_Play")
        self.actionNext_Track = QtWidgets.QAction(MainWindow)
        self.actionNext_Track.setObjectName("actionNext_Track")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionFAQ = QtWidgets.QAction(MainWindow)
        self.actionFAQ.setObjectName("actionFAQ")

        self.menuFile.addAction(self.actionAdd_file)
        self.menuFile.addAction(self.actionAdd_Playlist)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuControls.addAction(self.actionPrevious_Track)
        self.menuControls.addAction(self.actionPause_Play)
        self.menuControls.addAction(self.actionNext_Track)
        self.menuSupport.addAction(self.actionFAQ)

        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.menuSupport.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuControls.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.db = DataBase()
        db_connect = QtSql.QSqlDatabase.addDatabase("QSQLITE")
        db_connect.setDatabaseName("sql/CatMusic.db")
        db_connect.open()
        self.model1 = QSqlTableModel()
        self.model1.setTable('Music')
        self.model1.setEditStrategy(QSqlTableModel.OnManualSubmit)
        self.model1.select()

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        global tab_7
        tab_7 = self.tab_7

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.label_2.setText(_translate("MainWindow", "0:00"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate("MainWindow", "Music"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_8), _translate("MainWindow", "Playlist"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuControls.setTitle(_translate("MainWindow", "Controls"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuSupport.setTitle(qApp.translate("MainWindow", "Support"))
        self.actionAdd_file.setText(_translate("MainWindow", "Add file"))
        self.actionAdd_Playlist.setText(_translate("MainWindow", "Add Playlist"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionPrevious_Track.setText(_translate("MainWindow", "Previous Track          Ctrl+B"))
        self.actionPause_Play.setText(_translate("MainWindow", "Pause/Play                Ctrl+P"))
        self.actionNext_Track.setText(_translate("MainWindow", "Next Track                 Ctrl+N"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionFAQ.setText(_translate("MainWindow", "FAQ"))


class DropTableView(QTableView):  # создание класса DropTableView
    def __init__(self, *args, **kwargs):
        QTableView.__init__(self, *args, **kwargs)
        self.setAcceptDrops(True)
        self.setDragEnabled(True)
        self.db = DataBase()
        self.setDragDropOverwriteMode(True)
        self.setDragDropMode(QAbstractItemView.InternalMove)
        self.viewport().setAcceptDrops(True)
        self.setDropIndicatorShown(True)
        self.model1 = QSqlTableModel()
        db_connect = QtSql.QSqlDatabase.addDatabase("QSQLITE")  # подключение базы данных
        db_connect.setDatabaseName("sql/CatMusic.db")
        db_connect.open()

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):  # обработка dropEvent
        extensions = [".aac", '.ac3', '.aif', '.aiff', '.amr', '.aob', '.ape', '.asf', '.aud', '.awb', '.bin', '.bwg',
                      '.cdr', '.flac', '.gpx', '.ics', '.iff', '.m', '.m3u', '.m3u8', '.m4a', '.m4b', '.m4p', '.m4r',
                      '.mid', '.midi', '.mod', '.mp3', '.mpa', '.mpp', '.msc', '.msv', '.mts', '.nkc', '.ogg', '.ps',
                      '.ra', '.ram', '.sdf', '.sib', '.sln', '.spl', '.srt', '.srt', '.temp', '.vb', '.wav', '.wav',
                      '.wave', '.wm', '.wma', '.wpd', '.xsb', '.xwb']
        files = [u.toLocalFile() for u in event.mimeData().urls()]
        try:
            for index in files:
                if path.splitext(os.path.basename(index))[1] not in extensions:
                    print("Not audiofile")
                    continue
                audiofile = mutagen.File(index, easy=True)

                if audiofile is None or audiofile.get("title") is None or audiofile.get("artist") is None:

                    if "-" in index:
                        artist, title = path.splitext(os.path.basename(index))[0].split("-", 1)
                        self.db.add_music(artists=artist, title=title,
                                          time=f"{int(MP3(index).info.length) // 60}:\
                                                                    {str(int(MP3(index).info.length)% 60).zfill(2)}",
                                          extension=path.splitext(os.path.basename(index))[1], path_music=index)
                    else:

                        artist, title = "", path.splitext(os.path.basename(index))[0]
                        self.db.add_music(artists=artist, title=title,
                                          time=f"{int(MP3(index).info.length) // 60}:\
                                                    {str(int(MP3(index).info.length) % 60).zfill(2)}",
                                          extension=path.splitext(os.path.basename(index))[1], path_music=index)


                else:
                    artist = audiofile.get("artist")

                    title = audiofile.get("title")
                    print(path.splitext(os.path.basename(index))[1])
                    self.db.add_music(artists=artist[0], title=title[0],
                                      time=f"{int(MP3(index).info.length) // 60}:\
                                                    {str(int(MP3(index).info.length) % 60).zfill(2)}",
                                      extension=path.splitext(os.path.basename(index))[1], path_music=index)
        except:
            print("ERROR")
        self.model1 = QSqlTableModel()
        self.model1.setTable('Music')
        self.model1.setEditStrategy(QSqlTableModel.OnManualSubmit)
        self.model1.select()
        tableview.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)
        tableview.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        tableview.setModel(self.model1)
        tableview.setColumnHidden(0, True)
        tableview.setColumnHidden(5, True)
        tableview.horizontalHeader().setSectionResizeMode(1)
        tableview.setEditTriggers(QAbstractItemView.NoEditTriggers)
        tableview.setSelectionBehavior(QAbstractItemView.SelectRows)
        tableview.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        tableview.show()
